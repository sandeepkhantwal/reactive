/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reactive;

import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;
import reactor.core.publisher.Flux;

import java.util.ArrayList;
import java.util.List;

public class App {

  public String getGreeting() {
    return "Hello World!";
  }

  public static void main(String[] args) {
    List<Integer> elements = new ArrayList<>();

    Flux
        .just(1, 2, 3, 4)
        .log()
        .map(m -> m + 2)
//        .subscribe(elements::add);
        /*.subscribe(new Subscriber<Integer>() {
          @Override
          public void onSubscribe(Subscription s) {
            s.request(Long.MAX_VALUE);
          }

          @Override
          public void onNext(Integer integer) {
            elements.add(integer);
            System.out.println(integer + "added...");
          }

          @Override
          public void onError(Throwable t) {

          }

          @Override
          public void onComplete() {
            System.out.println("Stream ended...");
          }
        });*/
        .subscribe(new Subscriber<Integer>() {
          private Subscription subscription;
          private int subscriberData;
          @Override
          public void onSubscribe(Subscription s) {
            this.subscription = s;
            s.request(2);
          }

          @Override
          public void onNext(Integer integer) {
            System.out.println("integer :: "+ integer);
            elements.add(integer);
            subscriberData++;
            if(subscriberData % 2 == 0) {
              subscription.request(2);
            }
          }

          @Override
          public void onError(Throwable t) {

          }

          @Override
          public void onComplete() {

          }
        });
  }
}
